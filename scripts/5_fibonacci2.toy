var factorial_cache = {}

func factorial(n) {
    if not factorial_cache[n]
        if n == 0
            factorial_cache[n] = 1
        else
            factorial_cache[n] = n * factorial(n - 1)

    return factorial_cache[n]
}

var fibonacci_cache = {}
var fibonacci_cnt = 0
func fibonacci(n) {
    fibonacci_cnt += 1
    if not fibonacci_cache[n]
        if n == 0
            fibonacci_cache[n] = 1
        elif n == 1
            fibonacci_cache[n] = 1
        else
            fibonacci_cache[n] = fibonacci(n - 1) + fibonacci(n - 2)
    return fibonacci_cache[n]
}

println('factorial:');
for n is 0,10
    println(n, ': ', factorial(n))

println('fibonacci:');
for n is 0,10
    println(n, ': ', fibonacci(n));

println('factorial:');
for n is 0,10
    println(n, ': ', factorial(n))

println('fibonacci:');
for n is 0,10
    println(n, ': ', fibonacci(n));

println('factorial:');
for n is 0,10
    println(n, ': ', factorial(n))

println('fibonacci:');
for n is 0,10
    println(n, ': ', fibonacci(n));

println('factorial:');
for n is 0,10
    println(n, ': ', factorial(n))

println('fibonacci:');
for n is 0,10
    println(n, ': ', fibonacci(n));

println('factorial:');
for n is 0,10
    println(n, ': ', factorial(n))

println('fibonacci:');
for n is 0,10
    println(n, ': ', fibonacci(n));

println(fibonacci_cnt)

/*
println("fibonacci_cache:", fibonacci_cache)

println(fibonacci_cache[1])
if fibonacci_cache[1] println("in") else println("notin")
*/


